/** * $Id: BasicObjectTagCreator.java,v 1.8 2006/04/06 03:32:22 mblech Exp $ * $Author: mblech $ */package org.isistan.flabot.launcher.trace.objecttag;

import java.lang.reflect.Modifier;import java.util.Map;import org.isistan.flabot.javamodel.JArray;import org.isistan.flabot.javamodel.JClass;import org.isistan.flabot.javamodel.JField;import org.isistan.flabot.javamodel.JObject;import org.isistan.flabot.javamodel.JavaModelObjectHashProvider;import org.isistan.flabot.launcher.trace.MetadataHandler;import org.isistan.flabot.launcher.trace.TagUtil;import org.isistan.flabot.trace.log.Tag;import org.isistan.flabot.trace.log.tagquery.TagQueryUtil.ObjectConstants;import org.isistan.flabot.util.custommap.WeakCustomMap;public class BasicObjectTagCreator implements ObjectTagCreator {
	public Tag create(JObject jObject, MetadataHandler metadata) {
		Tag objectTag=TagUtil.createTag();		if(jObject==null)			return objectTag;		
		objectTag.setProperty(ObjectConstants.ID_PARAMETER, Long.toString(jObject.getId()));				String objectHashCode=hashCode(jObject);		String systemHashCode=systemHashCode(jObject);		objectTag.setProperty(ObjectConstants.HASH_CODE_PARAMETER, objectHashCode);
		objectTag.setProperty(ObjectConstants.SYSTEM_HASH_CODE_PARAMETER, systemHashCode);
		addFieldValues(objectTag, jObject, metadata);		TagUtil.addChildTag(objectTag, metadata.getClassLight(jObject.getObjectClass()), ObjectConstants.CLASS_TAG, false);		return objectTag;
	}		private void addFieldValues(Tag snapShot, JObject jObject, MetadataHandler metadata) {		Tag fieldsTag=TagUtil.createChildTag(snapShot, ObjectConstants.FINAL_FIELDS_TAG, true);				JClass jClass=jObject.getObjectClass();				while(jClass!=null) {			JArray<? extends JField> jFields=jClass.getDeclaredFields();			for (JField jField : jFields) {				int modifiers=jField.getModifiers();				if(Modifier.isFinal(modifiers) && !Modifier.isStatic(modifiers)) {					jField.setAccessible(true);					JObject value=jField.get(jObject);					String valueString;					if(value==null) {						valueString="null";					} else {						valueString=toString(value);					}					String descriptor=jField.getDescriptor();					fieldsTag.setProperty(descriptor, valueString);				}			}			jClass=jClass.getSuperclass();		}	}		private static final Object EXISTS=new Object();	private static Map<JObject, Object> tooLongObjects=new WeakCustomMap<JObject, Object>(			new JavaModelObjectHashProvider());	private static final int MAX_STRING_LENGTH=500;	static String toString(JObject jObject) {		try {			if(tooLongObjects.containsKey(jObject)) {				return "<string is too long>";			}			String string=jObject.objectToString();			if(string==null) {				string="null";			}			if(string.length()>MAX_STRING_LENGTH) {				tooLongObjects.put(jObject, EXISTS);				return "<string is too long>";			}						return string;		} catch (Throwable e) {			return "<exception invoking objectToString(): ["+ e.getClass().getName() + "]" + e.toString()+ ">";		}	}			static String hashCode(JObject jObject) {		try {			String hashCode=Long.toString(jObject.objectHashCode());			if(hashCode==null) {				hashCode="null";			}			return hashCode;		} catch (Throwable e) {			return "<exception invoking objectHashCode(): ["+ e.getClass().getName() + "]" + e.toString()+ ">";		}	}				static String systemHashCode(JObject jObject) {		try {			String hashCode=Long.toString(jObject.systemHashCode());			if(hashCode==null) {				hashCode="null";			}			return hashCode;		} catch (Throwable e) {			return "<exception invoking systemHashCode(): ["+ e.getClass().getName() + "]" + e.toString()+ ">";		}	}	}
