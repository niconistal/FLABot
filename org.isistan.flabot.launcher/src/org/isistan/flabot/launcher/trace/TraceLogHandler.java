/** * $Id: TraceLogHandler.java,v 1.10 2006/03/29 21:36:44 dacostae Exp $ * $Author: dacostae $ */package org.isistan.flabot.launcher.trace;

import java.awt.GridLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.io.IOException;import java.lang.reflect.Field;import java.util.Collections;import java.util.Iterator;import java.util.List;import javax.swing.JButton;import javax.swing.JFrame;import org.eclipse.emf.common.util.URI;import org.eclipse.emf.ecore.EPackage;import org.eclipse.emf.ecore.EcorePackage;import org.eclipse.emf.ecore.resource.Resource;import org.eclipse.emf.ecore.resource.ResourceSet;import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;import org.eclipse.emf.ecore.xmi.XMLResource;import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;import org.isistan.flabot.coremodel.CoremodelPackage;import org.isistan.flabot.gauge.GaugeConsumer;import org.isistan.flabot.launcher.trace.objecttag.BasicObjectSnapshotTagCreator;import org.isistan.flabot.launcher.trace.objecttag.BasicObjectTagCreator;import org.isistan.flabot.trace.TagTreeModel;import org.isistan.flabot.trace.config.ConfigPackage;import org.isistan.flabot.trace.config.Context;import org.isistan.flabot.trace.config.TraceConfiguration;import org.isistan.flabot.trace.log.LogContext;import org.isistan.flabot.trace.log.LogFactory;import org.isistan.flabot.trace.log.LogPackage;import org.isistan.flabot.trace.log.Tag;import org.isistan.flabot.trace.log.TraceLog;import org.isistan.flabot.util.emf.WorkaroundURIConverter;public class TraceLogHandler {	private TraceConfiguration traceConfiguration=null;
	private Resource traceLogResource=null;
	private TraceLog traceLog=null;	private LogContextGenerator[] gaugeConsumers;	private ControlPanelListener collectionHandler;	private boolean startCollecting;	
	public TraceLogHandler(String traceConfigurationFile, ControlPanelListener collectionHandler) {
		this.collectionHandler=collectionHandler;
		this.traceConfiguration=getConfiguration(traceConfigurationFile);
		this.traceLogResource=createLogResource(traceConfiguration.getOutputFileName());
		this.traceLog=createTraceLog(traceLogResource);		this.gaugeConsumers=createConsumers(traceConfiguration, traceLog);		this.startCollecting=			this.traceConfiguration.getStartCollecting().booleanValue();			}	public boolean isStartCollecting() {		return startCollecting;	}		private LogContextGenerator[] createConsumers(TraceConfiguration traceConfiguration, TraceLog traceLog) {		//create root tag		Tag rootTag=LogFactory.eINSTANCE.createTag();		traceLog.getTags().add(rootTag);		//create the trace generator		TraceGenerator traceGenerator=new TraceGenerator(rootTag, new BasicObjectTagCreator(), new BasicObjectSnapshotTagCreator());		//get contexts		List contexts=traceConfiguration.getContexts();		Iterator contextsIterator=contexts.listIterator();		//create grauge consumers and filters		LogContextGenerator[] gaugeConsumers=new LogContextGenerator[contexts.size()];		for(int i=0; i<gaugeConsumers.length; i++) {			Context context=(Context)contextsIterator.next();			LogContext logContext=LogFactory.eINSTANCE.createLogContext();			logContext.setName(context.getName());			logContext.setLog(traceLog);			traceLog.getContexts().add(logContext);			gaugeConsumers[i]=new LogContextGenerator(logContext, context.getFilter(), traceGenerator);		}		return gaugeConsumers;	}		public TraceLog getTraceLog() {		return traceLog;	}			public TraceConfiguration getTraceConfiguration() {		return traceConfiguration;	}		public GaugeConsumer[] getGaugeConsumers() {		return gaugeConsumers;	}		public void reset() {		for (LogContextGenerator gaugeConsumer : gaugeConsumers) {			gaugeConsumer.reset();		}
	}

	private Resource createLogResource(String logFile) {
		URI uri = URI.createFileURI(logFile);
		ResourceSet resourceSet = new ResourceSetImpl();
		resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(
				Resource.Factory.Registry.DEFAULT_EXTENSION, new XMIResourceFactoryImpl());

		if(LogPackage.eINSTANCE==null);
		Resource traceLogResource = resourceSet.createResource(uri);
		return traceLogResource;
	
	}
	private TraceLog createTraceLog(Resource traceLogResource) {
		TraceLog traceLog=LogFactory.eINSTANCE.createTraceLog();
		traceLogResource.getContents().add(traceLog);
		return traceLog;

	}

	private TraceConfiguration getConfiguration(String flabotFile) {
		URI uri = URI.createFileURI(flabotFile);
		ResourceSet resourceSet = new ResourceSetImpl();		resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(				Resource.Factory.Registry.DEFAULT_EXTENSION, new XMIResourceFactoryImpl()				);		resourceSet.getLoadOptions().put(XMLResource.OPTION_RECORD_UNKNOWN_FEATURE,				Boolean.TRUE);		resourceSet.setURIConverter(new WorkaroundURIConverter());
		initializeEMFPackage("org.isistan.flabot.engine.executionstate.ExecutionstatePackage");		initializeEMFPackage("org.isistan.flabot.mapping.mappingmodel.MappingmodelPackage");		initializeEMFPackage("org.isistan.flabot.edit.editormodel.EditormodelPackage");		initializeEMFPackage("org.isistan.flabot.coremodel.CoremodelPackage");		if(ConfigPackage.eINSTANCE==null);		if(CoremodelPackage.eINSTANCE==null);		if(EcorePackage.eINSTANCE==null);		Resource resource = resourceSet.getResource(uri, true);		TraceConfiguration traceConfiguration=(TraceConfiguration)resource.getContents().get(0);		return traceConfiguration;
	}		private void initializeEMFPackage(String packageName) {		try {			Class<? extends EPackage> clazz=(Class<? extends EPackage>) ClassLoader.getSystemClassLoader().loadClass(packageName);			Field field=clazz.getField("eINSTANCE");			EPackage epackage=(EPackage)field.get(null);//			System.out.println("Package initialized: " + epackage.getName());		} catch (ClassNotFoundException e) {			throw new RuntimeException("Couldn't load EMF package '" + packageName + "'",e);		} catch (NoSuchFieldException e) {			throw new RuntimeException("Couldn't find eINSTANCE field in EMF package '" + packageName + "'",e);		} catch (SecurityException e) {			throw new RuntimeException("Couldn't security exception accessing eINSTANCE field for EMF package '" + packageName + "'",e);		} catch (IllegalArgumentException e) {			throw new RuntimeException("Couldn't illegal argument exception accessing eINSTANCE field for EMF package '" + packageName + "'",e);		} catch (IllegalAccessException e) {			throw new RuntimeException("Couldn't illegal access exception accessing eINSTANCE field for EMF package '" + packageName + "'",e);		}			}
	
	public void save() throws IOException {
		traceLogResource.save(Collections.EMPTY_MAP);
	}		public void openControlPanel() {		final JFrame frame=new JFrame();		frame.setSize(450,70);		frame.setLocation(0,0);		frame.setResizable(false);		frame.setAlwaysOnTop(true);		frame.setLayout(new GridLayout());		frame.setTitle("Flabot Collecting Session");		final JButton startButton=new JButton("Start");		startButton.setToolTipText("Start");		startButton.setEnabled(!startCollecting);		frame.getContentPane().add(startButton);		final JButton pauseButton=new JButton("Pause");		pauseButton.setToolTipText("Pause");		pauseButton.setEnabled(startCollecting);		frame.getContentPane().add(pauseButton);		final JButton saveButton=new JButton("Save");		saveButton.setToolTipText("Save");		saveButton.setEnabled(!startCollecting);		frame.getContentPane().add(saveButton);		final JButton resetButton=new JButton("Reset");		resetButton.setToolTipText("Reset");		frame.getContentPane().add(resetButton);		final JButton viewButton=new JButton("View");		viewButton.setToolTipText("View");		viewButton.setEnabled(!startCollecting);		frame.getContentPane().add(viewButton);				startButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent event) {				if(collectionHandler.start()) {					startButton.setEnabled(false);					pauseButton.setEnabled(true);					saveButton.setEnabled(false);					viewButton.setEnabled(false);				}			}		});		pauseButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent event) {				if(collectionHandler.pause()) {					startButton.setEnabled(true);					pauseButton.setEnabled(false);					saveButton.setEnabled(true);					viewButton.setEnabled(true);				}			}		});		saveButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent event) {				collectionHandler.save();			}		});		resetButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent event) {				collectionHandler.reset();			}		});				viewButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent event) {				Tag root=TagUtil.createTag();				Tag log=TagUtil.createChildTag(root, "log", true);				Tag contexts=TagUtil.createChildTag(root, "contexts", true);				int index=0;				for (Iterator iter = traceLog.getTags().iterator(); iter.hasNext();) {					Tag tag = (Tag) iter.next();					TagUtil.addChildTag(log, tag, Integer.toString(index++), false);				}				for (Iterator iter = traceLog.getContexts().iterator(); iter.hasNext();) {					LogContext context = (LogContext) iter.next();					Tag contextTag=TagUtil.createChildTag(contexts, context.getName(), true);					int contextIndex=0;					for (Iterator tagIter = context.getTags().iterator(); tagIter.hasNext();) {						Tag tag = (Tag) tagIter.next();						TagUtil.addChildTag(contextTag, tag, Integer.toString(contextIndex++), false);					}				}				TagTreeModel.show("Trace log","trace log", root);			}		});		frame.addWindowListener(new WindowAdapter() {			@Override			public void windowClosing(WindowEvent e) {				frame.setVisible(true);			}			@Override			public void windowClosed(WindowEvent e) {				frame.setVisible(true);			}		});		frame.setVisible(true);	}

}
