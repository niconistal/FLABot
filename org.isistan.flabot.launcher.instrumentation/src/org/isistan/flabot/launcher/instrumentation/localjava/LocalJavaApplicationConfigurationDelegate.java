/** * $Id: LocalJavaApplicationConfigurationDelegate.java,v 1.7 2006/08/03 00:51:18 jcarlino Exp $ * $Author: jcarlino $ */package org.isistan.flabot.launcher.instrumentation.localjava;import java.io.File;import java.util.Map;import org.eclipse.core.runtime.CoreException;import org.eclipse.core.runtime.IProgressMonitor;import org.eclipse.debug.core.ILaunch;import org.eclipse.debug.core.ILaunchConfiguration;import org.eclipse.jdt.launching.ExecutionArguments;import org.eclipse.jdt.launching.IVMRunner;import org.eclipse.jdt.launching.JavaLaunchDelegate;import org.eclipse.jdt.launching.VMRunnerConfiguration;import org.isistan.flabot.instrumentation.ClassLoaderGenerator;import org.isistan.flabot.instrumentation.launcher.Launcher;import org.isistan.flabot.launcher.instrumentation.FlabotInitializer;import org.isistan.flabot.launcher.instrumentation.LauncherInstrumentationUtils;public class LocalJavaApplicationConfigurationDelegate extends JavaLaunchDelegate {		private File traceConfiguration;	public LocalJavaApplicationConfigurationDelegate(File traceConfiguration) {		this.traceConfiguration=traceConfiguration;	}	private String getMain(ILaunchConfiguration configuration) throws CoreException {		return super.verifyMainTypeName(configuration);	}		@Override	public String verifyMainTypeName(ILaunchConfiguration configuration) throws CoreException {		getMain(configuration);		return Launcher.class.getName();	}		@Override	public String getProgramArguments(ILaunchConfiguration configuration) throws CoreException {		return FlabotInitializer.class.getName() + " " + traceConfiguration.getAbsolutePath() + " " + getMain(configuration) + " " + super.getProgramArguments(configuration);	}	@Override	public String getVMArguments(ILaunchConfiguration configuration) throws CoreException {		return LauncherInstrumentationUtils.getVMArguments(super.getVMArguments(configuration), false);	}	@Override	public String[] getClasspath(ILaunchConfiguration configuration) throws CoreException {		return LauncherInstrumentationUtils.getClasspath(super.getClasspath(configuration), false);			}		/* (non-Javadoc)	 * @see org.eclipse.debug.core.model.ILaunchConfigurationDelegate#launch(org.eclipse.debug.core.ILaunchConfiguration, java.lang.String, org.eclipse.debug.core.ILaunch, org.eclipse.core.runtime.IProgressMonitor)	 */	@Override	public void launch(ILaunchConfiguration configuration, String mode, ILaunch launch, IProgressMonitor monitor) throws CoreException {		launchClassLoaderGenerator(configuration, mode, launch, monitor);		super.launch(configuration, mode, launch, monitor);	}			public void launchClassLoaderGenerator(ILaunchConfiguration configuration, String mode, ILaunch launch, IProgressMonitor monitor) throws CoreException {		String mainTypeName = ClassLoaderGenerator.class.getName();		IVMRunner runner = getVMRunner(configuration, mode);		File workingDir = verifyWorkingDirectory(configuration);		String workingDirName = null;		if (workingDir != null) {			workingDirName = workingDir.getAbsolutePath();		}				// Environment variables		String[] envp= getEnvironment(configuration);				// Program & VM args		String pgmArgs = LauncherInstrumentationUtils.CLASSLOADER_FILE;		String vmArgs = LauncherInstrumentationUtils.getVMArguments(super.getVMArguments(configuration), true);		ExecutionArguments execArgs = new ExecutionArguments(vmArgs, pgmArgs);				// VM-specific attributes		Map vmAttributesMap = getVMSpecificAttributesMap(configuration);				// Classpath		String[] classpath= LauncherInstrumentationUtils.getClasspath(super.getClasspath(configuration), true);				// Create VM config		VMRunnerConfiguration runConfig = new VMRunnerConfiguration(mainTypeName, classpath);		runConfig.setProgramArguments(execArgs.getProgramArgumentsArray());		runConfig.setEnvironment(envp);		runConfig.setVMArguments(execArgs.getVMArgumentsArray());		runConfig.setWorkingDirectory(workingDirName);		runConfig.setVMSpecificAttributesMap(vmAttributesMap);		// Bootpath		runConfig.setBootClassPath(getBootpath(configuration));				// stop in main		prepareStopInMain(configuration);				// set the default source locator if required		setDefaultSourceLocator(launch, configuration);				// Launch the configuration - 1 unit of work		runner.run(runConfig, launch, monitor);	}}