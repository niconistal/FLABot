/** * $Id: LauncherInstrumentationUtils.java,v 1.7 2006/05/04 21:41:46 dacostae Exp $ * $Author: dacostae $ */package org.isistan.flabot.launcher.instrumentation;import org.eclipse.emf.common.CommonPlugin;import org.eclipse.emf.ecore.plugin.EcorePlugin;import org.eclipse.emf.ecore.xmi.XMIPlugin;import org.isistan.flabot.util.plugin.PluginUtils;public class LauncherInstrumentationUtils {		public static final String PATH_SEPARATOR = System.getProperty("path.separator");	public static final String FILE_SEPARATOR = System.getProperty("file.separator");	private static String getTempDir() {		String tmp=appendFileSeparator(System.getProperty("java.io.tmpdir"));		if(tmp==null) {			tmp=appendFileSeparator(System.getProperty("user.dir")) + 				FILE_SEPARATOR + 				"tmp"+ 				FILE_SEPARATOR + 				"flabot" + 				FILE_SEPARATOR;		}		return tmp;	}		private static String appendFileSeparator(String path) {		if(path==null || path.trim().length()==0) {			throw new RuntimeException("Path is null or empty.");		}		if(!path.endsWith(FILE_SEPARATOR)) {			path+=FILE_SEPARATOR;		}		return path;	}		public static final String TEMP_DIR=getTempDir();		private static String getTempBootDir() {		return TEMP_DIR + "flabot" + FILE_SEPARATOR;	}	public static final String TEMP_BOOT_DIR=getTempBootDir();		private static String getClassLoaderFile() {		return TEMP_BOOT_DIR + "java" + 				FILE_SEPARATOR + "lang" + 				FILE_SEPARATOR + "ClassLoader.class";	}		public static final String PLUGIN_DIR = 		appendFileSeparator(PluginUtils.getPluginFolder("org.isistan.flabot.instrumentation"));	public static final String BIN_DIR = PLUGIN_DIR + "bin" + FILE_SEPARATOR;	public static final String BOOT_BIN_DIR = PLUGIN_DIR + "bootbin" + FILE_SEPARATOR;	public static final String CLASSLOADER_FILE=getClassLoaderFile();	private static String[] getLibs() {		try {			return new String[] {					appendFileSeparator(PluginUtils.getPluginFolder("org.isistan.flabot.launcher.instrumentation")) + "bin" + FILE_SEPARATOR,					appendFileSeparator(PluginUtils.getPluginFolder("org.isistan.flabot.engine")) + "bin" + FILE_SEPARATOR,					appendFileSeparator(PluginUtils.getPluginFolder("org.isistan.flabot.util")) + "bin" + FILE_SEPARATOR,					appendFileSeparator(PluginUtils.getPluginFolder("org.isistan.flabot.javamodel")) + "bin" + FILE_SEPARATOR,					appendFileSeparator(PluginUtils.getPluginFolder("org.isistan.flabot.javamodel.javassist")) + "bin" + FILE_SEPARATOR,					appendFileSeparator(PluginUtils.getPluginFolder("org.isistan.flabot.javamodel.java")) + "bin" + FILE_SEPARATOR,					appendFileSeparator(PluginUtils.getPluginFolder("org.isistan.flabot")) + "bin" + FILE_SEPARATOR,					appendFileSeparator(PluginUtils.getPluginFolder("org.isistan.flabot.launcher")) + "bin" + FILE_SEPARATOR,					appendFileSeparator(PluginUtils.getPluginFolder("org.isistan.flabot.trace")) + "bin" + FILE_SEPARATOR,					appendFileSeparator(PluginUtils.getPluginFolder("org.isistan.flabot.gauge")) + "bin" + FILE_SEPARATOR,					appendFileSeparator(PluginUtils.getPluginFolder("org.isistan.flabot.gauge.instrumentation")) + "bin" + FILE_SEPARATOR,					appendFileSeparator(PluginUtils.getPluginFolder("org.isistan.flabot.javassist")) + "lib/javassist.jar",					appendFileSeparator(PluginUtils.getPluginFolder("org.isistan.javalog")) + "lib/javalog.jar",					appendFileSeparator(PluginUtils.getPluginFolder("org.isistan.flabot.mapping")) + "bin" + FILE_SEPARATOR,					appendFileSeparator(PluginUtils.getPluginFolder(EcorePlugin.getPlugin())),					appendFileSeparator(PluginUtils.getPluginFolder(CommonPlugin.getPlugin())),					appendFileSeparator(PluginUtils.getPluginFolder(XMIPlugin.getPlugin()))			};		} catch (Throwable e) {			System.out.println(e);			e.printStackTrace();			return null;		}	}	public static final String[] LIBS=getLibs();	private static String getLibsString() {		String libs="";		for (int i = 0; i < LIBS.length; i++) {			if(i>0)				libs+=PATH_SEPARATOR;			libs+=LIBS[i];		}		return libs;	}	public static final String LIBS_STRING=getLibsString();	public static String[] getVMArguments(String[] vmArgs, boolean generateClassLoader) {		String[] array=vmArgs;		String[] newArray=new String[array.length+2];		newArray[0]="-Xmx750M";		newArray[1]="-Xbootclasspath/p:" +		LauncherInstrumentationUtils.BOOT_BIN_DIR;				if(!generateClassLoader)			newArray[1]+=LauncherInstrumentationUtils.PATH_SEPARATOR +			LauncherInstrumentationUtils.TEMP_BOOT_DIR;				for(int i=0; i<array.length; i++) {			newArray[i+2]=array[i];		}		return newArray;	}		public static String getVMArguments(String vmArgs, boolean generateClassLoader) {		String[] newVMArgs=getVMArguments(vmArgs.split(" "), generateClassLoader);		String newClassPathString="";		for(int i=0; i<newVMArgs.length; i++) {			if(i>0)				newClassPathString+=" ";			newClassPathString+=newVMArgs[i];		}		return newClassPathString;	}	public static String[] getClasspath(String[] classPath, boolean generateClassLoader) {		String[] newClassPath=new String[LIBS.length+classPath.length +1];		newClassPath[0]=BIN_DIR;					for(int i=0; i<LIBS.length; i++) {			newClassPath[1+i]=LIBS[i];		}		for(int i=0; i<classPath.length; i++) {			newClassPath[1+LIBS.length+i]=classPath[i];		}		return newClassPath;	}}