#
# Makefile
#

# Programs (with common options):
SHELL		= /bin/sh
RM              = rm -f
MV              = mv -f
FIND            = find
XARGS           = xargs
TAR		= tar
ZIP		= zip
DATE		= `date +%m%d%y`

# Build programs
JAVAC           = javac
#JAVAC           = jikes
DOC++           = doc++
JAVADOC         = javadoc
JAR             = jar
RMIC            = rmic
JAVA            = java
ANTLR           = antlr.Tool
#JAVA            = jre

# do latex version of documentation
# uncomment next line to do it
#DO_LATEX       = 1

# PRCS related variables
# $Format: "PROJECT         = $Project$"$
PROJECT         = JavaLog1
PRCS		= prcs
# $Format: "VERSION         = $ProjectVersion$"$
VERSION         = 1.2.1


# Prefix for every install directory
PREFIX		= 

# Where to start installing the class files. Set this to an empty value
#  if you dont want to install classes
CLASS_DIR	= $(PREFIX)classes

# The directory to install the jar file in. Set this to an empty value
#  if you dont want to install a jar file
JAR_DIR	        = $(PREFIX)lib

# The directory to install html files generated by javadoc
DOC_DIR         = $(PREFIX)doc/api-docs

# The directory to install script files in
SCRIPT_DIR	= $(PREFIX)bin

# Build flags
JAVAC_FLAGS     = -g -d $(CLASS_DIR)
#JAVAC_FLAGS     = -d $(CLASS_DIR)
JAVADOC_FLAGS   = -version -author -private -package
JAR_FLAGS       = cvf0

# The name of the jar file to install
JAR_FILE        = $(JAR_DIR)/JavaLog.jar

# Packages we should compile
PACKAGES = \
	JavaLog \
	"JavaLog.classpath" \
	JavaLog.reflection \
	JavaLog.extension \
	JavaLog.visitor \
	JavaLog.debugger \
	JavaLog.debugger.dinterface \
	JavaLog.mobility \
	JavaLog.aip

# A marker variable for the top level directory
TOPLEVEL	:= .

# Subdirectories with java files:
JAVA_DIRS	:= $(subst .,/,$(PACKAGES)) $(TOPLEVEL)

# All the .java source files:
EXTRA_JAVA_SRC  := JavaLog/Scanner.java JavaLog/ScannerTokenTypes.java
JAVA_SRC	:= $(foreach dir, $(JAVA_DIRS), $(wildcard $(dir)/*.java))
JAVA_SRC	:= $(EXTRA_JAVA_SRC) $(JAVA_SRC) 

# Objects that should go into the jar file. (find syntax)
JAR_OBJS	:= \( -name '*.class' -o -name '*.gif' -o -name "*.au" \
		       -o -name '*.properties' \)

# Extra object files
EXTRA_OBJS	:= JavaLog.PlREngine_Skel.class JavaLog.RemoteLogicModule_Skel.class

# The main classes we should build:
JAVA_OBJS	:= $(subst /class,.class,$(subst .,/,$(patsubst %,$(CLASS_DIR)/%,$(JAVA_SRC:.java=.class) $(EXTRA_OBJS))))

# All the java .class files we should install (including inner classes):
JAVA_INSTALL_OBJS:= $(foreach dir,$(JAVA_DIRS), $(wildcard $(dir)/*.class))


#.SUFFIXES: _Skel.class .class .java
.SUFFIXES: .class .java
SRCS=$(wildcard *.java)
OBJS=$(SRCS:.java=.class)


# -----------
# Build Rules
# -----------

$(CLASS_DIR)/%.class: %.java
	$(JAVAC) $(JAVAC_FLAGS) $<
#	$(JAVAC) $(JAVAC_FLAGS) ($subst $(CLASS_DIR)/,,$<)

%.jar: $(JAVA_OBJS)
	(cd $(CLASS_DIR); $(JAR) $(JAR_FLAGS) ../$(JAR_FILE) JavaLog)
#	$(FIND) $(CLASS_DIR) $(JAR_OBJS) -print | $(XARGS) \
#	$(JAR) $(JAR_FLAGS) $(JAR_FILE) 


# -------
# Targets
# -------

.PHONY: clean all doc jar help

help:
	@echo "Usage: make [ all | jar | doc | dist | srcdist | package | clean ]"

all:	$(JAVA_OBJS) setup/Setup.class

setup/Setup.class: setup/Setup.java
	$(JAVAC) -d . setup/Setup.java

JavaLog/Scanner.java JavaLog/ScannerTokenTypes.java JavaLog/ScannerTokenTypes.txt: JavaLog/Scanner.g
	( cd JavaLog; $(JAVA) $(ANTLR) Scanner.g )

#$(CLASS_DIR)/JavaLog/PlREngine_Skel.class : $(CLASS_DIR)/JavaLog/PlREngine.class JavaLog/PlREngine.java

$(CLASS_DIR)/JavaLog/PlREngine_Skel.class : $(CLASS_DIR)/JavaLog/PlREngine.class
	( cd JavaLog; $(RMIC) -O -d ../$(CLASS_DIR) JavaLog.PlREngine )

#$(CLASS_DIR)/JavaLog/RemoteLogicModule_Skel.class : $(CLASS_DIR)/JavaLog/RemoteLogicModule.class JavaLog/RemoteLogicModule.java
$(CLASS_DIR)/JavaLog/RemoteLogicModule_Skel.class : $(CLASS_DIR)/JavaLog/RemoteLogicModule.class
	( cd JavaLog; $(RMIC) -O -d ../$(CLASS_DIR) JavaLog.RemoteLogicModule )

#ifneq (,$(findstring  Command not found, $(shell which $(DOC++))))
doc:	$(JAVA_SRC)
	javadoc -J-ms8M -version -d $(DOC_DIR) $(PACKAGES)
#else
#doc:	$(JAVA_SRC) JavaLog/doc.dxx
#	doc++ -J -H -A -p -u -d $(DOC_DIR) -f JavaLog/doc.dxx
#	cp JavaLog.gif $(DOC_DIR)/logo.gif
#ifdef (DO_LATEX)
#	doc++ -J -A -p -t -o JavaLogAPI.tex JavaLog/doc.dxx
#	latex JavaLogAPI.tex
#	latex JavaLogAPI.tex
#	latex JavaLogAPI.tex
#endif
#endif

dist: all doc
	$(RM) *.tgz *.zip
	$(TAR) -C .. --exclude *.tgz -czf JavaLog-$(VERSION).tgz JavaLog
	(cd ..; $(ZIP) -v9r JavaLog/JavaLog-$(VERSION).zip JavaLog -x \*.zip -x \*.tgz )

bindist: all doc
	$(RM) *.tgz *.zip
	$(TAR) -C .. --dereference --exclude *.tgz -czf JavaLogSwing.tgz JavaLog swing-1.1/swing.jar swing-1.1/LICENSE.txt
	(cd ..; $(ZIP) -v9r JavaLog/JavaLogSwing.zip JavaLog swing-1.1/swing.jar swing-1.1/LICENSE.txt -x \*.zip -x \*.tgz)

srcdist: clean
	$(TAR) -C .. --exclude *.tgz -czf JavaLog-src-$(VERSION).tgz JavaLog

snapshot: clean
	$(TAR) -C .. --exclude *.tgz -czf JavaLog-src-$(DATE).tgz JavaLog

package:
	$(PRCS) package -z $(PROJECT) JavaLog-PRCS-$(VERSION).gz

# Jar target
ifneq ($(strip $(JAR_FILE)),)
jar:  $(JAR_FILE)
else
	@echo No jar install dir defined
endif

clean::
	$(FIND) . \( -name '*~' -o -name '*.class' \) | $(XARGS) $(RM)
	$(RM) $(EXTRA_JAVA_SRC)
	$(RM) $(JAR_FILE)
	$(RM) *.tgz
