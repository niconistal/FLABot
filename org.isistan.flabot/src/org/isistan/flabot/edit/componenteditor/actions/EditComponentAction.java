/** * $Id: EditComponentAction.java,v 1.6 2006/03/21 01:51:55 franco Exp $ * $Author: franco $ */package org.isistan.flabot.edit.componenteditor.actions;import java.util.List;import org.eclipse.gef.GraphicalEditPart;import org.eclipse.gef.commands.Command;import org.eclipse.gef.ui.actions.SelectionAction;import org.eclipse.swt.widgets.Display;import org.eclipse.ui.IWorkbenchPart;import org.isistan.flabot.coremodel.ComponentModel;import org.isistan.flabot.edit.componenteditor.dialogs.component.ComponentEditionItem;import org.isistan.flabot.edit.componenteditor.dialogs.component.ComponentVisualEditionItem;import org.isistan.flabot.edit.componenteditor.editparts.ComponentEditPart;import org.isistan.flabot.edit.editor.CommandExecutor;import org.isistan.flabot.edit.editor.commands.NotifierCommandWrapper;import org.isistan.flabot.edit.editor.dialogs.StandardEditionDialog;import org.isistan.flabot.edit.editormodel.NodeVisualModel;import org.isistan.flabot.messages.Messages;import org.isistan.flabot.util.edition.DataAdapter;import org.isistan.flabot.util.edition.IdentityDataAdapter;import org.isistan.flabot.util.edition.tab.EditionTabItem;import org.isistan.flabot.util.edition.tab.EditionTabItemContainerImpl;import org.isistan.flabot.util.problems.MessageAccumulator;import org.isistan.flabot.util.problems.log.LoggerMessageAccumulator;/** * This action is used to edit the properties of the selected responsibility node *  * @author $Author: franco $ * */public class EditComponentAction extends SelectionAction {		/**	 * Action id	 */	public static final String		EDIT_COMPONENT = "EDIT_COMPONENT";   //$NON-NLS-1$	/**	 * Creates a new EditResponsibilityNodeAction in the given workbench part	 * @param part	 */	public EditComponentAction(IWorkbenchPart part) {		super(part);				setText(Messages.getString("org.isistan.flabot.edit.componenteditor.actions.EditComponentAction.text")); //$NON-NLS-1$		setId(EDIT_COMPONENT);	}	/**	 * Determines whether the action should be enabled or not.	 * @return true if a responsibility node is selected, false otherwise	 */	@Override	protected boolean calculateEnabled() {		return canPerformAction();	}	/**	 * Determines whether the action should be enabled or not.	 * @return true if a responsibility node is selected, false otherwise	 */	private boolean canPerformAction() {		List parts = getSelectedObjects();				if (parts.isEmpty())			return false;				if (parts.size() > 1) 			return false;				Object o = parts.get(0);		if (!(o instanceof ComponentEditPart))			return false;				return true;	}	/**	 * Opens a dialog for the user to edit the selected resonsibility node and then	 * creates a command that executes the changes, that include pre and post condition modification (add/remove/modify) and responsibility properties (name, description, show dependencies or not).	 * 	 * @return the created command	 */	private Command getCommand() {		List editparts = getSelectedObjects();		ComponentEditPart part = (ComponentEditPart)editparts.get(0);		MessageAccumulator messageAccumulator=			new LoggerMessageAccumulator();				DataAdapter<GraphicalEditPart, ComponentModel> visualModelToComponentModelAdapter=			new DataAdapter<GraphicalEditPart, ComponentModel>() {				public ComponentModel adapt(GraphicalEditPart data) {					return (ComponentModel)((NodeVisualModel)data.getModel()).getSemanticModel();				}					};						EditionTabItem<GraphicalEditPart> semanticEditionItem=			new EditionTabItemContainerImpl(Messages.getString("org.isistan.flabot.edit.componenteditor.actions.EditComponentAction.semanticProperties"), //$NON-NLS-1$					Messages.getString("org.isistan.flabot.edit.componenteditor.actions.EditComponentAction.componentSemanticProperties"), //$NON-NLS-1$					visualModelToComponentModelAdapter,					ComponentEditionItem.LOADER.getEditionItems(							messageAccumulator));				EditionTabItem<GraphicalEditPart> visualEditionItem=			new EditionTabItemContainerImpl(Messages.getString("org.isistan.flabot.edit.componenteditor.actions.EditComponentAction.visualProperties"), //$NON-NLS-1$					Messages.getString("org.isistan.flabot.edit.componenteditor.actions.EditComponentAction.componentVisualProperties"), //$NON-NLS-1$					new IdentityDataAdapter<GraphicalEditPart>(),					ComponentVisualEditionItem.LOADER.getEditionItems(							messageAccumulator));				StandardEditionDialog<GraphicalEditPart> dialog =			new StandardEditionDialog<GraphicalEditPart>(					Display.getCurrent().getActiveShell(),					Messages.getString("org.isistan.flabot.edit.componenteditor.dialogs.EditComponentDialog.title"), //$NON-NLS-1$					Messages.getString("org.isistan.flabot.edit.componenteditor.actions.EditComponentAction.componentProperties"), //$NON-NLS-1$					new EditionTabItem[] {						semanticEditionItem,						visualEditionItem});				return dialog.open(part);	}		/**	 * Shows an edition dialog, creates a command and then executes it.	 */	@Override	public void run() {		Command command = getCommand();		if (command != null) {			command = new NotifierCommandWrapper(command,					getWorkbenchPart().getSite().getShell());			CommandExecutor commandExecutor = (CommandExecutor)getWorkbenchPart().getAdapter(CommandExecutor.class);			commandExecutor.executeCommand(command, false);		}	}}