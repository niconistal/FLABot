/** * $Id: FamilyHasAllComponentConstraint.java,v 1.16 2006/04/06 03:39:42 apersson Exp $ * $Author: apersson $ */package org.isistan.flabot.coremodel.constraint;

import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Vector;import org.eclipse.emf.common.util.BasicDiagnostic;import org.eclipse.emf.common.util.Diagnostic;import org.eclipse.emf.common.util.DiagnosticChain;import org.isistan.flabot.coremodel.ComponentRole;import org.isistan.flabot.coremodel.Condition;import org.isistan.flabot.coremodel.Family;import org.isistan.flabot.coremodel.FamilyElement;import org.isistan.flabot.coremodel.Path;import org.isistan.flabot.coremodel.PathNode;import org.isistan.flabot.coremodel.ResponsibilityNode;import org.isistan.flabot.coremodel.StubNode;import org.isistan.flabot.coremodel.UseCaseMap;import org.isistan.flabot.messages.Messages;import org.isistan.flabot.util.consistency.Constraint;/**
 * Constraint entity for checking in a family if has referencies to all components
 * @author $Author: apersson $
 *
 */
public class FamilyHasAllComponentConstraint implements Constraint {
	
	public static final String CONSTRAINT_KEY = "Family_FamilyHasAllComponent"; //$NON-NLS-1$
		public boolean validate(Object constraintKey, Object model,
			DiagnosticChain diagnostics, Map context) {
				boolean isFaulty = false;		Family family = (Family) model;					Map<UseCaseMap, Integer> architecturalUCMs = new HashMap<UseCaseMap, Integer>();		Map<UseCaseMap, Integer> functionalUCMs = new HashMap<UseCaseMap, Integer>();		if (diagnostics != null) {			for(Iterator iter=family.getFamilyElement().iterator(); iter.hasNext();) {				FamilyElement familyElement = (FamilyElement) iter.next();								//Verify if the Architectural and Functional component of this Family Element are valid				if ( !validComponent(architecturalUCMs, familyElement.getArchitecturalComponent(), family.getArchitecturalUseCaseMaps()) ||				     !validComponent(functionalUCMs, familyElement.getFunctionalComponent(), family.getFunctionalUseCaseMaps()) ){					diagnostics.add					(new BasicDiagnostic						(Diagnostic.ERROR,						 "org.isistan.flabot.coremodel", //$NON-NLS-1$						 0,						 Messages.getString("org.isistan.flabot.coremodel.constraint.FamilyHasAllComponentConstraint.inconsistentFamily",  family.getName()), //$NON-NLS-1$						 new Object[] { family }));				}			}						//Verify if all the components of the Architectural Maps have			//been defined in the family			if (family.getFamilyElement().size() < validateUseCaseMaps(family.getArchitecturalUseCaseMaps(),new Vector())) {					diagnostics.add					(new BasicDiagnostic						(Diagnostic.ERROR,						 "org.isistan.flabot.coremodel", //$NON-NLS-1$						 0,						 Messages.getString("org.isistan.flabot.coremodel.constraint.FamilyHasAllComponentConstraint.familyDoNotHaveAllComponents",  family.getName()), //$NON-NLS-1$						 new Object[] { family }));				}		}		return isFaulty;
	}
	private boolean validComponent(Map<UseCaseMap, Integer> ucmMap, ComponentRole component, List ucmList) {		if (component == null)			return false;					UseCaseMap useCaseMap = component.getMap();				Integer number = ucmMap.get(useCaseMap);		if (number == null)			number = 0;		ucmMap.put(useCaseMap, ++number);				if (!ucmList.contains(useCaseMap))			return false;			return true;	}			protected int validateUseCaseMaps(List selectedUseCaseMap, Vector auxiliar) {		int value=0;		auxiliar.clear();		auxiliar.addAll(selectedUseCaseMap);		for(int i=0; i<selectedUseCaseMap.size(); i++){			UseCaseMap useCaseMap = (UseCaseMap) selectedUseCaseMap.get(i);			for (int j=0; j<useCaseMap.getPaths().size();j++){				Path path = (Path)useCaseMap.getPaths().get(j);				for (int k=0; k<path.getNodes().size();k++){					PathNode node = (PathNode) path.getNodes().get(k);					if (node instanceof ResponsibilityNode){						for (int h=0; h<((ResponsibilityNode)node).getResponsibility().getPreconditions().size();h++){							Condition condition = (Condition) ((ResponsibilityNode)node).getResponsibility().getPreconditions().get(h);							if (!condition.getType().equals(Condition.mappingCondition) && !selectedUseCaseMap.contains(condition.getDependencyResponsibility().getMap())){								auxiliar.add(condition.getDependencyResponsibility().getMap());								validateUseCaseMaps(auxiliar,new Vector());							}						}						}					if (node instanceof StubNode){						if (!selectedUseCaseMap.contains(((StubNode)node).getReferencedMap())){							auxiliar.add(((StubNode)node).getReferencedMap());							validateUseCaseMaps(auxiliar,new Vector());						}					}				}			}		}		for (int i=0; i < auxiliar.size(); i++){			value += ((UseCaseMap)auxiliar.get(i)).getComponentRoles().size();		}		return value;	}
}