/** * $Id: Launcher.java,v 1.6 2006/02/23 20:26:41 mblech Exp $ * $Author: mblech $ */package org.isistan.flabot.instrumentation.launcher;

import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;public class Launcher {
	private static Initializer initializer;
	public static void main(String[] arguments) throws Throwable {		try {
			launch(arguments);		} catch (Throwable e) {			e.printStackTrace();			while(e!=null) {				e=e.getCause();				if(e!=null) {					System.err.println("CAUSE:");					e.printStackTrace();				}			}		}
	}			private static void launch(String[] arguments) throws Throwable {		if(arguments.length==0) {			System.out.println("Flabot launcher: Initializer class should be passed as argument.");			throw new RuntimeException("Initializer class not specified");		}				String initializerClassName=arguments[0];				Class initializerClass;		try {			initializerClass = ClassLoader.getSystemClassLoader().loadClass(initializerClassName);		} catch (ClassNotFoundException e) {			System.out.println("Error loading initializer class");			throw e;		}		try {			initializer = (Initializer)initializerClass.newInstance();		} catch (InstantiationException e) {			System.out.println("Initializer couldn't be instatiated");			throw e;		} catch (IllegalAccessException e) {			System.out.println("Initializer default constructor inaccessible");			throw e;		}		boolean started=false;		try {			String[] newArguments=new String[arguments.length-1];			for (int i = 0; i < newArguments.length; i++) {				newArguments[i]=arguments[i+1];			}						initializer.start(newArguments);			started=true;			//InstrumentorClassLoader icl = InstrumentorClassLoader.getInstance();			//Thread.currentThread().setContextClassLoader(icl);				Class mainClass;			try {				mainClass = /*icl*/ClassLoader.getSystemClassLoader().loadClass(initializer.getMainClassName());			} catch (ClassNotFoundException e) {				System.out.println("Error loading initializer class");				throw e;			}			Method mainMethod;			try {				mainMethod = mainClass.getDeclaredMethod("main", new Class[]{String[].class});			} catch (SecurityException e) {				System.out.println("SecurityException trying to get the main method");				throw e;			} catch (NoSuchMethodException e) {				System.out.println("Main method not found");				throw e;			}						try {				mainMethod.setAccessible(true);				mainMethod.invoke(null, new Object[]{initializer.getArguments()});			} catch (SecurityException e) {				System.out.println("SecurityException trying to call the main method");				throw e;			} catch (IllegalArgumentException e) {				System.out.println("Main method doesn't accept standard parameters");				throw e;			} catch (IllegalAccessException e) {				System.out.println("Main method inaccessible");				throw e;			} catch (InvocationTargetException e) {				System.out.println("Internal error inside main (cause thrown)");				throw e.getCause();			}		} finally {			if(started) {				initializer.finish();			}		}	}
}
